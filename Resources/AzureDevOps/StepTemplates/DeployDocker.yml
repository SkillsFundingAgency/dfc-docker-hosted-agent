parameters:
  AksResourceGroup: ''
  AzureSubscriptionEndpoint: ''
  ImageBaseName: ''
  KubernetesCluster: ''
  ManifestFilename: ''
  AzurePatToken: ''

steps:
# Create PAT token secret
- task: Kubernetes@1
  displayName: kubectl create pat token secret
  inputs:
    connectionType: Azure Resource Manager
    azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
    azureResourceGroup: ${{ parameters.AksResourceGroup }}
    kubernetesCluster: ${{ parameters.KubernetesCluster }}
    useClusterAdmin: true
    namespace: 'default'
    secretType: generic
    secretArguments: --from-literal=pattokensecret=${{ parameters.AzurePatToken }}
    secretName: dfc-azuredevops-pat-token
# - task: esfadevops.Tokenization.custom-build-task.Tokenization@0
#   displayName: 'Tokenization: Transform file ${{ parameters.ManifestFilename }}'
#   inputs:
#     SourcePath: $(Pipeline.Workspace)/${{ parameters.ImageBaseName }}
#     TargetFileNames: ${{ parameters.ManifestFilename }}
# - task: Kubernetes@1
#   displayName: kubectl deploy manifest ${{ parameters.ManifestFilename }}
#   inputs:
#     connectionType: Azure Resource Manager
#     azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
#     azureResourceGroup: ${{ parameters.AksResourceGroup }}
#     kubernetesCluster: ${{ parameters.KubernetesCluster }}
#     useClusterAdmin: true
#     namespace: 'default'
#     command: 'apply'
#     arguments: '--filename=$(Pipeline.Workspace)/${{ parameters.ImageBaseName }}/${{ parameters.ManifestFilename }}'
        # Deploy the NCS.AzureDevOpsAgents.JMeter docker image
- template: AzureDevOpsTemplates\Deploy\StepTemplates\dfc-kubernetes-deploy.yml@dfc-devops
  parameters:
    AksResourceGroup: ${{ parameters.AksResourceGroup }}
    AzureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
    KubernetesCluster: ${{ parameters.KubernetesCluster }}
    ManifestFileName: ${{ parameters.ManifestFilename }}
    PathToManifest: $(Pipeline.Workspace)/${{ parameters.ImageBaseName }}